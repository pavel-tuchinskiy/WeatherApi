// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence;

namespace Persistence.Migrations
{
    [DbContext(typeof(WeatherDbContext))]
    [Migration("20211125220100_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.Entities.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("AvgTemperature")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("MaxTemperature")
                        .HasColumnType("int");

                    b.Property<int>("MinTemperature")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c9d4c053-49b6-410c-bc78-2d54a9991870"),
                            AvgTemperature = 12m,
                            MaxTemperature = 12,
                            MinTemperature = 11,
                            Name = "Kharkiv"
                        },
                        new
                        {
                            Id = new Guid("3d490a70-94ce-4d15-9494-5248280c2ce3"),
                            AvgTemperature = 12m,
                            MaxTemperature = 12,
                            MinTemperature = 11,
                            Name = "Kyiv"
                        },
                        new
                        {
                            Id = new Guid("b2434fb3-c190-4402-8a53-933fed036753"),
                            AvgTemperature = 12m,
                            MaxTemperature = 12,
                            MinTemperature = 11,
                            Name = "Lviv"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Temperature", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CelsiusDegrees")
                        .HasColumnType("int");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateTime")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Temperatures");

                    b.HasData(
                        new
                        {
                            Id = new Guid("80abbca8-664d-4b20-b5de-024705497d4a"),
                            CelsiusDegrees = 15,
                            CityId = new Guid("c9d4c053-49b6-410c-bc78-2d54a9991870"),
                            DateTime = new DateTime(2021, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("7eb16423-225d-4ba4-8372-1ce2586fe765"),
                            CelsiusDegrees = 14,
                            CityId = new Guid("c9d4c053-49b6-410c-bc78-2d54a9991870"),
                            DateTime = new DateTime(2021, 10, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("def22be0-5a3d-484c-9d34-d7f81322c971"),
                            CelsiusDegrees = 17,
                            CityId = new Guid("3d490a70-94ce-4d15-9494-5248280c2ce3"),
                            DateTime = new DateTime(2021, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("1ae21e68-a465-4684-961c-1c2fe29c35c2"),
                            CelsiusDegrees = 15,
                            CityId = new Guid("3d490a70-94ce-4d15-9494-5248280c2ce3"),
                            DateTime = new DateTime(2021, 10, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("f3017f31-ee17-4445-9bf8-0cd153258090"),
                            CelsiusDegrees = 12,
                            CityId = new Guid("b2434fb3-c190-4402-8a53-933fed036753"),
                            DateTime = new DateTime(2021, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("01430a7d-b7a6-469b-9618-8fb8217dcfc6"),
                            CelsiusDegrees = 10,
                            CityId = new Guid("b2434fb3-c190-4402-8a53-933fed036753"),
                            DateTime = new DateTime(2021, 10, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Domain.Entities.Temperature", b =>
                {
                    b.HasOne("Domain.Entities.City", null)
                        .WithMany("Temperatures")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.City", b =>
                {
                    b.Navigation("Temperatures");
                });
#pragma warning restore 612, 618
        }
    }
}
